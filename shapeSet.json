{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "./shapeSet.json",
  "title": "shapeSet",
  "description": "A list of parts/interactibles and blocks that can be used in the game",
  "type": "object",
  "definitions": {
    "objRatings": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "density": {
          "type": "integer"
        },
        "durability": {
          "type": "integer"
        },
        "friction": {
          "type": "integer"
        },
        "buoyancy": {
          "type": "integer"
        }
      }
    },
    "objRestrictions": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "destructable": {
          "type": "boolean"
        },
        "erasable": {
          "type": "boolean"
        },
        "buildable": {
          "type": "boolean"
        },
        "liftable": {
          "type": "boolean"
        },
        "convertibleToDynamic": {
          "type": "boolean"
        },
        "paintable": {
          "type": "boolean"
        },
        "usable": {
          "type": "boolean"
        },
        "connectable": {
          "type": "boolean"
        }
      }
    },
    "engine": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "gears": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "velocity": {
                "type": "number"
              },
              "power": {
                "type": "number"
              }
            }
          }
        },
        "effect": {
          "type": "string"
        }
      }
    }
  },
  "properties": {
    "partList": {
      "type": "array",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "uuid": {
            "$ref": "./uuid.json",
            "title": "A unique identifier for the part"
          },
          "destroyTime": {
            "type": "number",
            "description": "The time it takes to destroy the part"
          },
          "density": {
            "type": "number",
            "deprecated": true,
            "description": "please use the new one under 'ratings'"
          },
          "name": {
            "type": "string",
            "description": "A unique name for the part"
          },
          "color": {
            "$ref": "./hexColor.json"
          },
          "box": {
            "$ref": "./vec3.json",
            "title": "A rectangular box collider"
          },
          "cylinder": {
            "type": "object",
            "description": "A cylindrical collider",
            "properties": {
              "diameter": {
                "type": "number"
              },
              "depth": {
                "type": "number"
              },
              "margin": {
                "type": "number"
              },
              "axis": {
                "enum": [
                  "Y",
                  "X",
                  "Z"
                ],
                "description": "which axis the depth is on"
              }
            }
          },
          "hull": {
            "type": "object",
            "description": "A convex hull collider\n[x,y,z] are a rectangular box that contains the hull",
            "additionalProperties": false,
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              },
              "z": {
                "type": "number"
              },
              "col": {
                "$ref": "./smPath.json",
                "title": "Path to collider"
              },
              "margin": {
                "type": "number"
              }
            },
            "required": [
              "x",
              "y",
              "z",
              "col"
            ]
          },
          "sphere": {
            "type": "object",
            "description": "A spherical collider",
            "additionalProperties": false,
            "properties": {
              "diameter": {
                "type": "number"
              }
            }
          },
          "scripted": {
            "additionalProperties": false,
            "type": "object",
            "properties": {
              "filename": {
                "$ref": "./smPath.json"
              },
              "classname": {
                "type": "string",
                "description": "The class that the game will inject all the callbacks and properties into"
              },
              "data": {
                "type": "object",
                "description": "Additional data provided to the script available under self.data"
              },
              "tag": {
                "type": "string",
                "description": "Used for https://scrapmechanicdocs.com/docs/Game-Script-Environment/Static-Functions/sm.cell#getinteractablesbytag"
              },
              "seat": {
                "$ref": "./steering.json"
              },
              "steering": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "steerAngle": {
                    "type": "number"
                  }
                }
              }
            },
            "required": [
              "filename",
              "classname"
            ]
          },
          "rotationSet": {
            "description": "How the part can be rotated when placed",
            "oneOf": [
              {
                "enum": [
                  "Default",
                  "Lift",
                  "PackingLamp",
                  "PropFalseYNegY",
                  "PropFull",
                  "PropFullMinusNegY",
                  "PropFullMinusNegZ",
                  "PropFullMinusZ",
                  "PropFullYmmNegYmm",
                  "PropNegY",
                  "PropNegYNegZ",
                  "PropNegYX",
                  "PropNegYXNegX",
                  "PropNegYmZX",
                  "PropNegYmmX",
                  "PropNegZ",
                  "PropX",
                  "PropXNegZm",
                  "PropXmm",
                  "PropY",
                  "PropYNegY",
                  "PropYNegYZ",
                  "PropYNegYZNegX",
                  "PropYNegYZNegZ",
                  "PropYNegYZX",
                  "PropYNegZ",
                  "PropYNegZXNegX",
                  "PropYX",
                  "PropYXmNegXm",
                  "PropYZ",
                  "PropYZNegX",
                  "PropYZNegXm",
                  "PropYZNegZNegX",
                  "PropYZNegZX",
                  "PropYZX",
                  "PropYZXNegX",
                  "PropYZXmNegXm",
                  "PropYZm",
                  "PropYZmNegZm",
                  "PropYZmNegZmX",
                  "PropYZmX",
                  "PropYmNegYm",
                  "PropYmNegYmX",
                  "PropYmNegYmZ",
                  "PropYmNegYmZX",
                  "PropYmXm",
                  "PropYmZ",
                  "PropYmZX",
                  "PropYmZm",
                  "PropYmZmXm",
                  "PropYmZmm",
                  "PropYmm",
                  "PropYmmNegYmm",
                  "PropYmmNegYmmZ",
                  "PropYmmZ",
                  "PropYmmZm",
                  "PropZ",
                  "PropZNegY",
                  "PropZNegZ",
                  "PropZX",
                  "PropZXNegX",
                  "PropZY",
                  "PropZYNegX",
                  "PropZmX",
                  "PropZmY",
                  "PropZmYm",
                  "PropZmmNegZmm",
                  "PropZmmYm",
                  "SquareBlock",
                  "StaticY",
                  "StaticYZX",
                  "StaticYZmNegZmX",
                  "StaticYmZX",
                  "StaticYmZmNegXm",
                  "StaticYmZmXm",
                  "StaticYmmZmmXmm"
                ]
              },
              {
                "type": "string"
              }
            ]
          },
          "seat": {
            "$ref": "./steering.json"
          },
          "sticky": {
            "type": "string",
            "description": "which axis can other block/parts be placed on",
            "pattern": "([-+][XYZ])+"
          },
          "physicsMaterial": {
            "$ref": "./materials.json"
          },
          "ratings": {
            "$ref": "#/definitions/objRatings"
          },
          "flammable": {
            "type": "boolean",
            "description": "if the part is flammable"
          },
          "autoTool": {
            "$ref": "./uuid.json",
            "description": "the uuid of a tool, used when the part is placed"
          },
          "stackSize": {
            "type": "integer",
            "description": "number of parts that can be in one inventory slot"
          },
          "restrictions": {
            "$ref": "#/definitions/objRestrictions"
          },
          "showInInventory": {
            "type": "boolean",
            "description": "if the part is visible in the \"creative\" inventory"
          },
          "renderable": {
            "oneOf": [
              {
                "$ref": "./smPath.json",
                "title": "path to renderable"
              },
              {
                "$ref": "./rend.json"
              }
            ]
          },
          "characterShape": {
            "type": "object",
            "description": "specifies that this represents a character",
            "additionalProperties": false,
            "properties": {
              "characterUuid": {
                "$ref": "./uuid.json",
                "title": "the character"
              },
              "placementSphereRadius": {
                "type": "number"
              }
            }
          },
          "spotlight": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "defaultLuminance": {
                "type": "number",
                "description": "default brightness"
              },
              "effect": {
                "$ref": "./effect.json"
              }
            }
          },
          "spotLight": {
            "type": "object",
            "description": "same as 'spotlight' sm devs decided to just capitalise the L",
            "additionalProperties": false,
            "properties": {
              "defaultLuminance": {
                "type": "number"
              },
              "effect": {
                "$ref": "./effect.json"
              }
            }
          },
          "itemStack": {
            "type": "object",
            "description": "specifies that when placed down, it 'consumes' all of that stack into one physical item with a number saying how manu there are",
            "additionalProperties": false
          },
          "consumable": {
            "type": "boolean",
            "description": "if the part is consumable\nused to put in the CONSUMABLE category of inventory"
          },
          "edible": {
            "type": "object",
            "description": "if it can be \"eaten\"",
            "additionalProperties": false,
            "properties": {
              "hpGain": {
                "type": "number",
                "description": "the amount of health gained when eaten"
              },
              "foodGain": {
                "type": "number",
                "description": "the amount of food gained when eaten"
              },
              "waterGain": {
                "type": "number",
                "description": "the amount of water gained when eaten"
              }
            }
          },
          "carryItem": {
            "type": "boolean",
            "description": "if this object needs to be caried on the players sholder when picked up.\n(not placed in inventory)"
          },
          "pipe": {
            "type": "object",
            "description": "config for pipes",
            "additionalProperties": false,
            "properties": {
              "extendable": {
                "type": "boolean",
                "description": "if this part can be expanded with (Q)"
              },
              "openings": {
                "type": "array",
                "description": "a list of all the different pipe connection points\n[X, Y, Z] is used to show where on the part the connection is.",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "side": {
                      "description": "which side the opening is on on",
                      "enum": [
                        "+X",
                        "-X",
                        "+Y",
                        "-Y",
                        "+Z",
                        "-Z",
                        "Y"
                      ]
                    },
                    "x": {
                      "type": "number"
                    },
                    "y": {
                      "type": "number"
                    },
                    "z": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "simpleInteractive": {
            "type": "object",
            "description": "specifies that this is an interactible.\ncan have a single logical input, used to trigger and animation and audio.",
            "additionalProperties": false,
            "properties": {
              "animationTime": {
                "type": "number"
              },
              "sustainedAudio": {
                "type": "string"
              }
            }
          },
          "harvest": {
            "type": "boolean",
            "description": "if the part can be harvested"
          },
          "chest": {
            "type": "object",
            "description": "specifies that this object is a chest",
            "additionalProperties": false,
            "properties": {
              "slots": {
                "type": "integer",
                "description": "The amount of slots that the chest has"
              }
            }
          },
          "survivalSpring": {
            "type": "object",
            "description": "specifies that this is a (newer) spring.",
            "additionalProperties": false,
            "properties": {
              "length": {
                "type": "integer",
                "description": "the amount of blocks long this spring is"
              }
            }
          },
          "survivalThruster": {
            "type": "object"
          },
          "survivalSequence": {
            "type": "object"
          },
          "survivalSensor": {
            "type": "object"
          },
          "survivalPiston": {
            "type": "object"
          },
          "previewRotation": {
            "type": "array",
            "description": "(quat?) used to set the angle for the inventory icon generated by the mod tool",
            "items": {
              "type": "number"
            },
            "minLength": 9,
            "maxLength": 9
          },
          "plantable": {
            "type": "object",
            "description": "specifies if the part can be planted",
            "additionalProperties": false,
            "properties": {
              "harvestable": {
                "$ref": "./uuid.json",
                "description": "the uuid of a harvestable that is associated with this part"
              }
            }
          },
          "friction": {
            "type": "number"
          },
          "restitution": {
            "type": "number"
          },
          "harvestablePart": {
            "type": "boolean",
            "description": "if this is part of a harvestable"
          },
          "button": {
            "type": "object",
            "description": "specifies that the part is a button"
          },
          "baseUuid": {
            "$ref": "./uuid.json",
            "title": "used to specify the UUID of a part that this derives from"
          },
          "title": {
            "type": "string",
            "description": "man just stick to one fucking thing just fucking use name instead of this but sm devs use this shit for whatever reason just in one shapeSet"
          },
          "lever": {
            "type": "object",
            "description": "specifies that the object is a \"lever\" or switch"
          },
          "legacyId": {
            "type": "number",
            "deprecated": true,
            "description": "old SM identifier"
          },
          "preview": {
            "type": "object",
            "description": "(used for SM debug shenanagins)",
            "additionalProperties": false,
            "properties": {
              "effect": {
                "type": "string"
              }
            }
          },
          "logic": {
            "type": "object",
            "description": "specifies that this is a logic gate"
          },
          "timer": {
            "type": "object",
            "description": "specifiew that this is a timer"
          },
          "tone": {
            "type": "object",
            "description": "used for specifying the audio for SM's note-heads",
            "additionalProperties": false,
            "properties": {
              "audio": {
                "type": "array",
                "description": "list of audio sources that the head can play",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "event": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "piston": {
            "type": "object",
            "description": "specifies that this is a piston",
            "additionalProperties": false,
            "properties": {
              "length": {
                "type": "number",
                "description": "max length it can go"
              },
              "defaultRange": {
                "type": "number",
                "description": "default length it is set to"
              },
              "effect": {
                "$ref": "./effect.json"
              },
              "defaultSpeedLevel": {
                "type": "number",
                "description": "default speed it is set to"
              },
              "force": {
                "type": "number",
                "description": "how much force it exerpts\n(the normal creative piston is 100000.0)"
              },
              "speedLevels": {
                "type": "array",
                "description": "list of different speeds it can have",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "speed": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "qualityLevel": {
            "type": "number"
          },
          "bearing": {
            "type": "object",
            "description": "specifies that this is a bearing"
          },
          "spring": {
            "type": "object",
            "description": "specifies it is a spring/suspension",
            "additionalProperties": false,
            "properties": {
              "length": {
                "type": "number",
                "description": "the starting length it is at"
              },
              "defaultStiffnessLevel": {
                "type": "number",
                "description": "it's default stiffness"
              },
              "stiffnessLevels": {
                "type": "array",
                "description": "list of all the different stiffnesses",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "stiffness": {
                      "type": "number"
                    }
                  }
                }
              },
              "effect": {
                "$ref": "./effect.json"
              }
            }
          },
          "steering": {
            "$ref": "./steering.json"
          },
          "gasEngine": {
            "$ref": "#/definitions/engine"
          },
          "electricEngine": {
            "$ref": "#/definitions/engine"
          },
          "controller": {
            "type": "object",
            "description": "specifies that this is a controller",
            "additionalProperties": false,
            "properties": {
              "effect": {
                "$ref": "./effect.json"
              }
            }
          },
          "sensor": {
            "type": "object",
            "description": "specifies that this is a sensor",
            "additionalProperties": false,
            "properties": {
              "onEffect": {
                "$ref": "./effect.json"
              },
              "offEffect": {
                "$ref": "./effect.json"
              }
            }
          },
          "radio": {
            "type": "object",
            "description": "specifies that this a sensor"
          },
          "thruster": {
            "type": "object",
            "description": "specifies that this is a thruster",
            "additionalProperties": false,
            "properties": {
              "levels": {
                "type": "array",
                "description": "list of all the different strength levels it can have",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "averageForce": {
                      "type": "number"
                    },
                    "forceVariation": {
                      "type": "number"
                    }
                  }
                }
              },
              "effect": {
                "$ref": "./effect.json"
              }
            }
          }
        }
      }
    },
    "blockList": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "uuid": {
            "$ref": "./uuid.json",
            "title": "the unique identifier of the block"
          },
          "name": {
            "type": "string",
            "title": "a unique name for the block."
          },
          "dif": {
            "$ref": "./smPath.json",
            "title": "path to DIF texture"
          },
          "asg": {
            "$ref": "./smPath.json",
            "title": "path to ASG texture"
          },
          "nor": {
            "$ref": "./smPath.json",
            "title": "path to NOR texture"
          },
          "tiling": {
            "type": "integer",
            "description": "Amount of blocks of Tiling the texture represents"
          },
          "color": {
            "$ref": "./hexColor.json"
          },
          "physicsMaterial": {
            "$ref": "./materials.json"
          },
          "ratings": {
            "$ref": "#/definitions/objRatings"
          },
          "friction": {
            "type": "number",
            "description": "please use the new friction under 'ratings'",
            "deprecated": true
          },
          "flammable": {
            "type": "boolean",
            "description": "if the block is flammable"
          },
          "density": {
            "type": "number",
            "description": "the density of the block"
          },
          "qualityLevel": {
            "type": "number"
          },
          "restrictions": {
            "$ref": "#/definitions/objRestrictions"
          },
          "alpha": {
            "type": "boolean",
            "description": "if the block has transparency"
          },
          "glass": {
            "type": "boolean",
            "description": "if the block is considerd glass "
          },
          "max_stack_count": {
            "type": "integer",
            "description": "the maximum amount of blocks that can be stacked in one inventory slot"
          }
        }
      }
    }
  }
}